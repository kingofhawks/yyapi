<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.yycoin.dao.THgPriceconfigMapper">
  <resultMap id="BaseResultMap" type="cn.yycoin.entity.THgPriceconfig">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="category" jdbcType="VARCHAR" property="category" />
    <result column="year" jdbcType="INTEGER" property="year" />
    <result column="standard" jdbcType="VARCHAR" property="standard" />
    <result column="condition" jdbcType="VARCHAR" property="condition" />
    <result column="packaged" jdbcType="VARCHAR" property="packaged" />
    <result column="certificate" jdbcType="VARCHAR" property="certificate" />
    <result column="price" jdbcType="VARCHAR" property="price" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="creater" jdbcType="VARCHAR" property="creater" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, category, year, standard, condition, packaged, certificate, price, createtime, 
    creater
  </sql>
  <select id="selectByExample" parameterType="cn.yycoin.entity.THgPriceconfigExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_hg_priceconfig
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_hg_priceconfig
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_hg_priceconfig
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.yycoin.entity.THgPriceconfigExample">
    delete from t_hg_priceconfig
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.yycoin.entity.THgPriceconfig">
    insert into t_hg_priceconfig (id, category, year, 
      standard, condition, packaged, 
      certificate, price, createtime, 
      creater)
    values (#{id,jdbcType=INTEGER}, #{category,jdbcType=VARCHAR}, #{year,jdbcType=INTEGER}, 
      #{standard,jdbcType=VARCHAR}, #{condition,jdbcType=VARCHAR}, #{packaged,jdbcType=VARCHAR}, 
      #{certificate,jdbcType=VARCHAR}, #{price,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, 
      #{creater,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.yycoin.entity.THgPriceconfig">
    insert into t_hg_priceconfig
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="year != null">
        year,
      </if>
      <if test="standard != null">
        standard,
      </if>
      <if test="condition != null">
        condition,
      </if>
      <if test="packaged != null">
        packaged,
      </if>
      <if test="certificate != null">
        certificate,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="creater != null">
        creater,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="category != null">
        #{category,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        #{year,jdbcType=INTEGER},
      </if>
      <if test="standard != null">
        #{standard,jdbcType=VARCHAR},
      </if>
      <if test="condition != null">
        #{condition,jdbcType=VARCHAR},
      </if>
      <if test="packaged != null">
        #{packaged,jdbcType=VARCHAR},
      </if>
      <if test="certificate != null">
        #{certificate,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="creater != null">
        #{creater,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.yycoin.entity.THgPriceconfigExample" resultType="java.lang.Long">
    select count(*) from t_hg_priceconfig
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <!--商品查询列表-->
  <select id="findTHg" resultType="String">
    select distinct category from t_hg_priceconfig

  </select>
  <!--根据商品查询年份列表-->
  <select id="findYear" parameterType="String" resultType="String">
    SELECT DISTINCT year FROM t_hg_priceconfig WHERE category LIKE #{cate}
  </select>
  <!--根据(商品名+年份)查询standard列表-->
  <select id="findStandard" parameterType="map" resultType="String">
    SELECT DISTINCT t.standard FROM t_hg_priceconfig t
    WHERE t.category LIKE #{cate} AND
          t.year LIKE #{year}
  </select>
  <!--根据(商品名+年份+standard)查询condition-->
  <select id="findCondition" parameterType="map" resultType="String">
    SELECT DISTINCT t.condition FROM t_hg_priceconfig t
    WHERE t.category LIKE #{cate} AND
          t.year LIKE #{year} AND
          t.standard LIKE #{standard}
  </select>
    <!--根据(商品名+年份+standard+condition)查询packaged-->
  <select id="findPackaged" parameterType="cn.yycoin.entity.THgPriceconfig" resultType="String">
    SELECT DISTINCT packaged FROM t_hg_priceconfig t
    WHERE t.category LIKE #{category} AND
          t.year LIKE #{year} AND
          t.standard LIKE #{standard} AND
          t.condition LIKE #{condition}
  </select>
  <!--根据(商品名+年份+standard+condition+packaged)查询certificate-->
  <select id="findCertificate" parameterType="cn.yycoin.entity.THgPriceconfig" resultType="String">
    SELECT DISTINCT certificate FROM t_hg_priceconfig t
    WHERE t.category LIKE #{category} AND
           t.year LIKE #{year} AND
           t.standard LIKE #{standard} AND
           t.condition LIKE #{condition} AND
          t.packaged LIKE #{packaged}
  </select>
  <!--根据6个字段查询价格-->
  <select id="findPrice" parameterType="cn.yycoin.entity.THgPriceconfig" resultType="String">
    SELECT  t.price FROM t_hg_priceconfig t
    WHERE t.category LIKE #{category} AND
           t.year LIKE #{year} AND
           t.standard LIKE #{standard} AND
           t.condition1 LIKE #{condition1} AND
           t.packaged LIKE #{packaged} AND
           t.certificate LIKE #{certificate}

  </select>




  <update id="updateByExampleSelective" parameterType="map">
    update t_hg_priceconfig
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.category != null">
        category = #{record.category,jdbcType=VARCHAR},
      </if>
      <if test="record.year != null">
        year = #{record.year,jdbcType=INTEGER},
      </if>
      <if test="record.standard != null">
        standard = #{record.standard,jdbcType=VARCHAR},
      </if>
      <if test="record.condition != null">
        condition = #{record.condition,jdbcType=VARCHAR},
      </if>
      <if test="record.packaged != null">
        packaged = #{record.packaged,jdbcType=VARCHAR},
      </if>
      <if test="record.certificate != null">
        certificate = #{record.certificate,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.creater != null">
        creater = #{record.creater,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_hg_priceconfig
    set id = #{record.id,jdbcType=INTEGER},
      category = #{record.category,jdbcType=VARCHAR},
      year = #{record.year,jdbcType=INTEGER},
      standard = #{record.standard,jdbcType=VARCHAR},
      condition = #{record.condition,jdbcType=VARCHAR},
      packaged = #{record.packaged,jdbcType=VARCHAR},
      certificate = #{record.certificate,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=VARCHAR},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      creater = #{record.creater,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.yycoin.entity.THgPriceconfig">
    update t_hg_priceconfig
    <set>
      <if test="category != null">
        category = #{category,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        year = #{year,jdbcType=INTEGER},
      </if>
      <if test="standard != null">
        standard = #{standard,jdbcType=VARCHAR},
      </if>
      <if test="condition != null">
        condition = #{condition,jdbcType=VARCHAR},
      </if>
      <if test="packaged != null">
        packaged = #{packaged,jdbcType=VARCHAR},
      </if>
      <if test="certificate != null">
        certificate = #{certificate,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="creater != null">
        creater = #{creater,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.yycoin.entity.THgPriceconfig">
    update t_hg_priceconfig
    set category = #{category,jdbcType=VARCHAR},
      year = #{year,jdbcType=INTEGER},
      standard = #{standard,jdbcType=VARCHAR},
      condition = #{condition,jdbcType=VARCHAR},
      packaged = #{packaged,jdbcType=VARCHAR},
      certificate = #{certificate,jdbcType=VARCHAR},
      price = #{price,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      creater = #{creater,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>